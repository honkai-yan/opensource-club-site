import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-Dxf9IIS9.js";const t={};function l(o,i){return n(),e("div",null,[...i[0]||(i[0]=[a(`<p>PlatformIO 是<strong>一个开源的物联网（IoT）和嵌入式开发生态系统</strong>，提供了一个统一的、跨平台的开发环境和工具链，支持多种硬件平台、开发框架和集成开发环境（IDE），如 VS Code,，并集成了强大的库管理器、构建系统和调试功能。</p><p>然而使用 VSCode + PlatformIO 进行开发时，PlatformIO 默认只使用 C/C++ Extension 来提供代码补全、跳转、语义分析等能力，但 C/C++ Extension 仅适合中小型项目（低情商：其实就是一坨 💩），跳转和分析能力也不如 Clangd。因此本文记录了让 PlatformIO 使用开源社区的 Clangd 来替代 C/C++ Extension 的方法。</p><h2 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装"><span>插件安装</span></a></h2><p>首先打开 VSCode ，在扩展商城里搜索并安装 PlatformIO ，PlatformIO 会自动下载和配置需要的环境。</p><p>如果遇到网络问题，可以开启猫猫的增强模式（ TUN 模式）。如果你的猫猫不支持增强模式，则需要手动配置 http_proxy 和 https_proxy ，并确保 VSCode 插件使用与 VSCode 相同的代理。参考：<a href="https://www.aahgo.com/post/328.html" target="_blank" rel="noopener noreferrer">Visual Studio Code 中设置代理服务器的方法</a>。</p><p>接下来在扩展商城里安装 Clangd 插件，无需额外配置。</p><h2 id="禁用-c-c-extension-只使用-clangd" tabindex="-1"><a class="header-anchor" href="#禁用-c-c-extension-只使用-clangd"><span>禁用 C/C++ Extension，只使用 Clangd</span></a></h2><p>这里的禁用不是指完全禁用 C/C++ Extension 插件，因为 PlatformIO 依赖这个插件才能工作，如果它被禁用，则 PlatformIO 也会被禁用（很抽象）。</p><p>所以我们选择在 C/C++ Extension 设置里将 intelliSense 关掉：在 VScode 设置里搜索 “c/c++ intelli sense engine” ，找到 “<strong>C_Cpp: Intelli Sense Engine</strong>” 设置，将其设置为 “disabled”。这样一来，这个插件就失去代码补全、跳转和语义分析的功能了。</p><p>接下来随便打开一个 PlatformIO 项目，在 platform.ini 文件里添加如下编译选项：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>build_flags =</span></span>
<span class="line"><span>  -Iinclude</span></span>
<span class="line"><span>  -Ilib</span></span>
<span class="line"><span>  -Isrc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加好编译选项后，重新构建一次项目，然后在终端运行命令：<code>pio run -t compiledb</code> 生成编译数据库（ compile_commands.json 文件）。</p><p>然后在 .vscode 目录下创建 settings.json 文件，设置 Clangd 搜索编译数据库的路径和使用的编译链：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;clangd.arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;--compile-commands-dir=\${你的compile_commands.json文件路径}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;--query-driver=\${你的编译器路径，可以在compile_commands.json中找到}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好后，使用快捷键 Ctrl + Shift + P 打开命令面板，输入 clangd ，选择 “Restart Language Server” 重启 Clangd 插件，就能享受更快更强的代码提示和跳转了。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ul><li>Clangd 可能会报诸如 ”Unknown Argument: ‘xxxxxx’“ 的错误，这是因为嵌入式开发中使用的编译链以 gcc 居多，PlatformIO 添加的编译参数通常是 gcc 扩展参数， clangd 对它们的支持不一定完善。此时需要在项目根目录创建一个 .clangd 文件，配置 Clangd 忽略对应的参数：</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">CompileFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  Remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">参数名(前面带-号)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">-fstrict-volatile-bitfields</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 示例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只要安装了 PlatformIO 插件，<code>pio</code> 命令就会被安装在电脑上，如果找不到 <code>pio</code> 命令，需要将 PlatformIO 环境添加到环境变量中。</li><li>每添加一个新的源文件（ .c 、.cpp 等），都需要重新运行 <code>pio run -t compiledb</code> ，确保编译数据库是最新的（除非新文件只引用已有的头文件）。如果嫌麻烦可以写成 shell 脚本，或者用 npm 简化命令：</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my-platformio-project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;cdb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pio run -t compiledb&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Q：为什么愿意折腾 Clangd，而不是想办法优化 C/C++ Extension ？ A：因为 C/C++ Extension 真的太 shit 了……</li></ul>`,21)])])}const d=s(t,[["render",l],["__file","platform-io-clangd.html.vue"]]),h=JSON.parse('{"path":"/tech-article/tech-note/platform-io-clangd.html","title":"PlatformIO 配置使用 Clangd，替换 C/C++ Extension","lang":"zh-CN","frontmatter":{"title":"PlatformIO 配置使用 Clangd，替换 C/C++ Extension","shortTitle":"PlatformIO 配置使用 Clangd","isOriginal":true,"date":"2025-08-30T00:00:00.000Z","author":"Da Capo","category":["技术笔记"],"tag":["Git","嵌入式","C/C++","PlatformIO"],"description":"PlatformIO 是一个开源的物联网（IoT）和嵌入式开发生态系统，提供了一个统一的、跨平台的开发环境和工具链，支持多种硬件平台、开发框架和集成开发环境（IDE），如 VS Code,，并集成了强大的库管理器、构建系统和调试功能。 然而使用 VSCode + PlatformIO 进行开发时，PlatformIO 默认只使用 C/C++ Exten...","head":[["meta",{"property":"og:url","content":"https://opensouce-club.top/tech-article/tech-note/platform-io-clangd.html"}],["meta",{"property":"og:title","content":"PlatformIO 配置使用 Clangd，替换 C/C++ Extension"}],["meta",{"property":"og:description","content":"PlatformIO 是一个开源的物联网（IoT）和嵌入式开发生态系统，提供了一个统一的、跨平台的开发环境和工具链，支持多种硬件平台、开发框架和集成开发环境（IDE），如 VS Code,，并集成了强大的库管理器、构建系统和调试功能。 然而使用 VSCode + PlatformIO 进行开发时，PlatformIO 默认只使用 C/C++ Exten..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T04:21:57.000Z"}],["meta",{"property":"article:author","content":"Da Capo"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"PlatformIO"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T04:21:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PlatformIO 配置使用 Clangd，替换 C/C++ Extension\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-14T04:21:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Da Capo\\"}]}"]]},"headers":[{"level":2,"title":"插件安装","slug":"插件安装","link":"#插件安装","children":[]},{"level":2,"title":"禁用 C/C++ Extension，只使用 Clangd","slug":"禁用-c-c-extension-只使用-clangd","link":"#禁用-c-c-extension-只使用-clangd","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"createdTime":1757823717000,"updatedTime":1757823717000,"contributors":[{"name":"honkai-yan","email":"da_capo_@outlook.com","commits":1}]},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"tech-article/tech-note/platform-io-clangd.md","localizedDate":"2025年8月30日","excerpt":"<p>PlatformIO 是<strong>一个开源的物联网（IoT）和嵌入式开发生态系统</strong>，提供了一个统一的、跨平台的开发环境和工具链，支持多种硬件平台、开发框架和集成开发环境（IDE），如 VS Code,，并集成了强大的库管理器、构建系统和调试功能。</p>\\n<p>然而使用 VSCode + PlatformIO 进行开发时，PlatformIO 默认只使用 C/C++ Extension 来提供代码补全、跳转、语义分析等能力，但 C/C++ Extension 仅适合中小型项目（低情商：其实就是一坨 💩），跳转和分析能力也不如 Clangd。因此本文记录了让 PlatformIO 使用开源社区的 Clangd 来替代 C/C++ Extension 的方法。</p>","autoDesc":true}');export{d as comp,h as data};
