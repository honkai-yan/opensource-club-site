import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-Dxf9IIS9.js";const l={};function n(d,i){return t(),s("div",null,[...i[0]||(i[0]=[a(`<h2 id="react-使用自定义-hook-复用逻辑" tabindex="-1"><a class="header-anchor" href="#react-使用自定义-hook-复用逻辑"><span>React - 使用自定义 Hook 复用逻辑</span></a></h2><hr><h2 id="node-找不到模块" tabindex="-1"><a class="header-anchor" href="#node-找不到模块"><span>Node 找不到模块</span></a></h2><p>一个小型服务器，使用 <code>mvc</code> 模式，以下是 <code>controller.js</code> 的导出代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// controller.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> useController</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 <code>main.js</code> 中使用 <code>import</code> 语句导入 <code>controller</code> 模块后，运行时提示找不到模块。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">useController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;....../controller&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ERR_MODULE_NOT_FOUND]: Cannot find module </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;......\\controller&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imported from ......</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ain.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>已经确认确保导入的路径正确，模块名称也正确。为什么会报错呢？</p><p><strong>错误原因： 上述代码在导入模块时没有携带后缀名。</strong></p><h3 id="当模块拥有路径也拥有后缀时" tabindex="-1"><a class="header-anchor" href="#当模块拥有路径也拥有后缀时"><span>当模块拥有路径也拥有后缀时</span></a></h3><p><code>node</code> 会直接根据模块路径进行查找，直接引入对应文件。</p><h3 id="当模块名有路径-但没有后缀名时" tabindex="-1"><a class="header-anchor" href="#当模块名有路径-但没有后缀名时"><span>当模块名有路径，但没有后缀名时</span></a></h3><ul><li>如果后缀名省略，先找同名 <code>js</code> 文件。</li><li>如果没有找到同名 <code>js</code> 文件，则寻找同名文件夹。</li><li>如果找到同名文件夹，则寻找文件夹中的 <code>index.js</code> 。</li><li>如果文件夹中没有 <code>index.js</code> ，则会去文件夹下的 <code>package,json</code> 中 <code>main</code> 选项定义的入口文件执行。</li><li>如果指定的入口文件不存在，或者 <code>package.json</code> 文件不存在，则报错，没有找到模块。</li></ul><h3 id="当模块没有路径-也没有后缀时-只有名字" tabindex="-1"><a class="header-anchor" href="#当模块没有路径-也没有后缀时-只有名字"><span>当模块没有路径，也没有后缀时（只有名字）</span></a></h3><ul><li><code>node</code> 在寻找模块时，会先假设模块是系统模块，并进行查找。</li><li>如果没有找到，则认为是第三方模块，到 <code>node_modules</code> 里去寻找。若当前目录没有 <code>node_modules</code> 文件夹，则会到父目录去寻找，直到找到全局的 <code>node_modules</code> 目录。</li><li>在 <code>node_modules</code> 里查找是否有同名的 <code>js</code> 文件。</li><li>如果没有，在 <code>node_moduels</code> 里寻找是否有同名的文件夹。</li><li>如果有，在文件夹里寻找 <code>index.js</code> 文件，如果没有，则寻找 <code>package.json</code> 文件的 <code>main</code> 选择指定的入口文件。</li><li>没有找到该文件或没有 <code>package.json</code> ，报错。</li></ul><hr><h2 id="小程序-tab-bar-图标过大" tabindex="-1"><a class="header-anchor" href="#小程序-tab-bar-图标过大"><span>小程序 tab bar 图标过大</span></a></h2><p>可以在导出前将图标缩小一定比例，并使用一个矩形包裹成一个组，如此图标与矩形之间会留出一些间隙。最后以 <code>webp</code> 或 <code>png</code> 格式导出即可。</p><hr><h2 id="git-各种字母提示的含义" tabindex="-1"><a class="header-anchor" href="#git-各种字母提示的含义"><span>Git 各种字母提示的含义</span></a></h2><ul><li>A： 本地新增的文件（远程仓库还没有）。 <code>Added</code></li><li>C：文件的一个新的拷贝。 <code>Copied</code></li><li>D：在本地删除的文件（在远程仓库还存在）。 <code>Deleted</code></li><li>M：文件的内容或者 <code>mode</code> 被修改了。通常指已使用 <code>add</code> 添加到暂存区，正在等待提交的文件。 <code>Modified</code></li><li>R： 文件名被修改了。 <code>Renamed</code></li><li>T： 文件的类型被修改了。 <code>Typed</code></li><li>U： 文件尚未被合并（需要完成合并才能提交），即尚未添加到暂存区。 <code>Unmerged</code></li><li>X： 未知状态（也可能是 <code>git</code> 的 bug）。 <code>X</code></li></ul><hr><h2 id="git-提交时漏掉了文件怎么办" tabindex="-1"><a class="header-anchor" href="#git-提交时漏掉了文件怎么办"><span>Git 提交时漏掉了文件怎么办</span></a></h2><p>在执行 <code>git push</code> 推送到远程仓库之前，可以使用 <code>git add</code> 将要补充的文件添加到暂存区，然后使用 <code>git commit --amend</code> 命令， <code>git</code> 会自动将暂存区的文件补充到上一次提交历史中。</p><hr><h2 id="git-取消上一次提交但保留更改" tabindex="-1"><a class="header-anchor" href="#git-取消上一次提交但保留更改"><span>Git 取消上一次提交但保留更改</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --soft</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> HEAD^</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="git-merge-提示填写-commit-是为什么" tabindex="-1"><a class="header-anchor" href="#git-merge-提示填写-commit-是为什么"><span>GIt merge 提示填写 commit 是为什么？</span></a></h2><p>通常情况下，使用 <code>git commit</code> 命令需要加上 <code>-m</code> 参数，填写 commit 信息，代表本次更改所进行的操作。但有时进行 <code>git merge</code> 操作时， <code>git</code> 也会提示填写 commit 信息。</p><p>引用知乎某答案：</p><blockquote><p>分支派生关系导致的，</p><p>举个例子。</p><p>我从 dev 分支创建了一个 yyf 分支，</p><p>然后我在 yyf 分支里 pull 或者 merge dev 分支</p><p>这时候就会出现这个提示。</p><p>因为 yyf 分支是从 dev 分支创建的，然后你现在却要把 dev 分支合并到 yyf 中去。这种操作就比较奇怪，git 就会提示你是不是真的要合并，并且希望你写出合并的原因。</p><p>更形象点的例子。</p><p>你从 master 分支创建了 dev 分支，然后当你要把 master 分支合并到 dev 中去时，就会出现提示。</p></blockquote><blockquote><p>注：知乎答案表明，将主分支合并到子分支可能会出现这样的情况，而本人的情况是将子分支合并到主分支时， <code>git</code> 提示填写 commit 信息。存疑。</p></blockquote><hr>`,35)])])}const h=e(l,[["render",n],["__file","daily01.html.vue"]]),c=JSON.parse('{"path":"/tech-article/daily-note/daily01.html","title":"日常笔记 01","lang":"zh-CN","frontmatter":{"title":"日常笔记 01","shortTitle":"日常笔记 01","isOriginal":true,"date":"2024-09-02T00:00:00.000Z","author":"Da Capo","category":["技术笔记"],"tag":["Git","Node","Javascript"],"description":"React - 使用自定义 Hook 复用逻辑 Node 找不到模块 一个小型服务器，使用 mvc 模式，以下是 controller.js 的导出代码： 而在 main.js 中使用 import 语句导入 controller 模块后，运行时提示找不到模块。 已经确认确保导入的路径正确，模块名称也正确。为什么会报错呢？ 错误原因： 上述代码在导入模...","head":[["meta",{"property":"og:url","content":"https://opensouce-club.top/tech-article/daily-note/daily01.html"}],["meta",{"property":"og:title","content":"日常笔记 01"}],["meta",{"property":"og:description","content":"React - 使用自定义 Hook 复用逻辑 Node 找不到模块 一个小型服务器，使用 mvc 模式，以下是 controller.js 的导出代码： 而在 main.js 中使用 import 语句导入 controller 模块后，运行时提示找不到模块。 已经确认确保导入的路径正确，模块名称也正确。为什么会报错呢？ 错误原因： 上述代码在导入模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T04:21:57.000Z"}],["meta",{"property":"article:author","content":"Da Capo"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"Node"}],["meta",{"property":"article:tag","content":"Javascript"}],["meta",{"property":"article:published_time","content":"2024-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T04:21:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日常笔记 01\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-14T04:21:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Da Capo\\"}]}"]]},"headers":[{"level":2,"title":"React - 使用自定义 Hook 复用逻辑","slug":"react-使用自定义-hook-复用逻辑","link":"#react-使用自定义-hook-复用逻辑","children":[]},{"level":2,"title":"Node 找不到模块","slug":"node-找不到模块","link":"#node-找不到模块","children":[{"level":3,"title":"当模块拥有路径也拥有后缀时","slug":"当模块拥有路径也拥有后缀时","link":"#当模块拥有路径也拥有后缀时","children":[]},{"level":3,"title":"当模块名有路径，但没有后缀名时","slug":"当模块名有路径-但没有后缀名时","link":"#当模块名有路径-但没有后缀名时","children":[]},{"level":3,"title":"当模块没有路径，也没有后缀时（只有名字）","slug":"当模块没有路径-也没有后缀时-只有名字","link":"#当模块没有路径-也没有后缀时-只有名字","children":[]}]},{"level":2,"title":"小程序 tab bar 图标过大","slug":"小程序-tab-bar-图标过大","link":"#小程序-tab-bar-图标过大","children":[]},{"level":2,"title":"Git 各种字母提示的含义","slug":"git-各种字母提示的含义","link":"#git-各种字母提示的含义","children":[]},{"level":2,"title":"Git 提交时漏掉了文件怎么办","slug":"git-提交时漏掉了文件怎么办","link":"#git-提交时漏掉了文件怎么办","children":[]},{"level":2,"title":"Git 取消上一次提交但保留更改","slug":"git-取消上一次提交但保留更改","link":"#git-取消上一次提交但保留更改","children":[]},{"level":2,"title":"GIt merge 提示填写 commit 是为什么？","slug":"git-merge-提示填写-commit-是为什么","link":"#git-merge-提示填写-commit-是为什么","children":[]}],"git":{"createdTime":1725290777000,"updatedTime":1757823717000,"contributors":[{"name":"honkai-yan","email":"2718504358@qq.com","commits":3},{"name":"honkai-yan","email":"da_capo_@outlook.com","commits":1}]},"readingTime":{"minutes":3.66,"words":1097},"filePathRelative":"tech-article/daily-note/daily01.md","localizedDate":"2024年9月2日","excerpt":"<h2>React - 使用自定义 Hook 复用逻辑</h2>\\n<hr>\\n<h2>Node 找不到模块</h2>\\n<p>一个小型服务器，使用 <code>mvc</code> 模式，以下是 <code>controller.js</code> 的导出代码：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// controller.js</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E5C07B\\"> useController</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  // ......</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,c as data};
